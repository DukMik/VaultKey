@page "/vaults"
@attribute [Authorize]

@using MudBlazor
@using TheApiDto

@inject CallServices                 CallServices
@inject AuthenticationStateProvider  AuthStateProvider
@inject NavigationManager            Nav
@inject IJSRuntime                   JS
@inject IDialogService               DialogService


<PageTitle>Vaults</PageTitle>

<h3 class="mb-4">Liste de vos Vaults</h3>

@if (Vaults is null)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
}
else if (Vaults.Count == 0)
{
    <MudAlert Severity="Severity.Info">Aucun vault trouvé.</MudAlert>
}
else
{
    <MudTable Items="Vaults" Hover="true" Elevation="1"
              RowClick="PromptPasswordAsync">
        <HeaderContent>
            <MudTh>Nom</MudTh>
            <MudTh>Date de création</MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Nom">VaultName</MudTd>
            <MudTd DataLabel="Date">DateCreated.ToLocalTime().ToShortDateString()</MudTd>
        </RowTemplate>
    </MudTable>
}

<hr class="my-6" />


<hr class="my-6" />

<h4>Créer un nouveau vault</h4>

<EditForm Model="NewVault" OnValidSubmit="CreateVaultAsync" FormName="createVault">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <MudPaper Class="pa-4" Elevation="1">
        <MudTextField @bind-Value="NewVault.VaultName" Label="Nom du vault" Required="true" Immediate="true" />
        <MudTextField @bind-Value="NewVault.Salt" Label="Salt" Required="true" Id="salt" Immediate="true" />
        <MudTextField @bind-Value="NewVault.KeyHash" Label="Hash de la clé" Required="true" Id="keyHash" Immediate="true" />
        <MudTextField @bind-Value="NewVault.PrivateKey" Label="Clé privée (base64)" Lines="3" Required="true" Id="privateKey" Immediate="true" />

        <MudStack Row="true" Spacing="2" Class="mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => JS.InvokeVoidAsync("vaultCrypto.generate"))">
                Générer crypto (JS)
            </MudButton>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">
                Enregistrer
            </MudButton>
        </MudStack>
    </MudPaper>

    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="mt-3">@ErrorMessage</MudAlert>
    }
</EditForm>

@* ----------  Script JS (inchangé) ---------- *@
<script>
const toHex = bytes => [...bytes].map(b => ('0'+b.toString(16)).slice(-2)).join('');

window.vaultCrypto = {
  generate: async () => {
    const salt = crypto.getRandomValues(new Uint8Array(16));
    document.getElementById('salt').value = toHex(salt);

    const hashBuf = await crypto.subtle.digest('SHA-256', salt);
    document.getElementById('keyHash').value = toHex(new Uint8Array(hashBuf));

    const { privateKey } = await crypto.subtle.generateKey(
        { name:'RSA-OAEP', modulusLength:2048,
          publicExponent:new Uint8Array([1,0,1]), hash:'SHA-256' },
        true, ['decrypt']);
    const pkcs8 = await crypto.subtle.exportKey('pkcs8', privateKey);
    document.getElementById('privateKey').value =
        btoa(String.fromCharCode(...new Uint8Array(pkcs8)));
  }
};
</script>
