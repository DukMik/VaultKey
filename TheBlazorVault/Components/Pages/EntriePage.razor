@page "/entries/{CurrentVaultId:int}"
@using TheApiDto
@using MudBlazor
@inject CallServices CallServices

@rendermode InteractiveServer

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5">Liste des entrées du vault @CurrentVaultId</MudText>

    <MudTable Items="_entries" Hover="true" Bordered="true" Striped="true">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Créé</MudTh>
            <MudTh>Modifié</MudTh>
            <MudTh>Désactivée</MudTh>
            <MudTh>Nom (base64)</MudTh>
            <MudTh>Utilisateur (base64)</MudTh>
            <MudTh>URL (base64)</MudTh>
            <MudTh>Commentaire (base64)</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.IdEntrie</MudTd>
            <MudTd DataLabel="Créé">@context.CreatedDate.ToString("g")</MudTd>
            <MudTd DataLabel="Modifié">@context.UpdatedDate.ToString("g")</MudTd>
            <MudTd DataLabel="Désactivée">@context.IsDesactivated</MudTd>
            <MudTd DataLabel="Nom">@context.NameData?.CryptedData</MudTd>
            <MudTd DataLabel="Utilisateur">@context.UserNameData?.CryptedData</MudTd>
            <MudTd DataLabel="URL">@context.UrlData?.CryptedData</MudTd>
            <MudTd DataLabel="Commentaire">@context.CommentData?.CryptedData</MudTd>
        </RowTemplate>
    </MudTable>

    <MudAlert Severity="Severity.Error" Style="margin-top: 15px;" Dense="true" Elevation="0" @bind-Visible="_errorVisible">@_errorMessage</MudAlert>
</MudPaper>

@code {
    [Parameter] public int CurrentVaultId {  get; set; }
    private List<EntrieDto> _entries = new();

    private bool _errorVisible = false;
    private string _errorMessage = "";

    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                _entries = await GettingAll(CurrentVaultId);
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
    
    
    
   

    private async Task<List<EntrieDto>> GettingAll(int currentVaultId)
    {
        return await CallServices.GetEntriesAsync(currentVaultId);
    }
}