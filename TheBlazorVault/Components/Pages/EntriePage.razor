@page "/entries/{CurrentVaultId:int}"
@using System.Text
@using TheApiDto
@using TheBlazorVault.Components.Pages.Modules
@using MudBlazor
@inject CallServices CallServices
@inject IDialogService DialogService


@rendermode InteractiveServer

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5">Liste des entrées du vault @CurrentVaultId</MudText>

    <MudTable Items="_entriesUncrypted" Hover="true" Bordered="true" Striped="true">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Créé</MudTh>
            <MudTh>Modifié</MudTh>
            <MudTh>Désactivée</MudTh>
            <MudTh>Nom (base64)</MudTh>
            <MudTh>Utilisateur (base64)</MudTh>
            <MudTh>URL (base64)</MudTh>
            <MudTh>Commentaire (base64)</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.IdEntrie</MudTd>
            <MudTd DataLabel="Créé">@context.CreatedDate.ToString("g")</MudTd>
            <MudTd DataLabel="Modifié">@context.UpdatedDate.ToString("g")</MudTd>
            <MudTd DataLabel="Désactivée">@context.IsDesactivated</MudTd>
            <MudTd DataLabel="Nom">@context.NameData</MudTd>
            <MudTd DataLabel="Utilisateur">@context.UserNameData</MudTd>
            <MudTd DataLabel="URL">@context.UrlData</MudTd>
            <MudTd DataLabel="Commentaire">@context.CommentData</MudTd>
            <MudTd>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" 
                OnClick="@(() => OpenDialog( "Edit", context))">Modifier</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>

    <MudButton Class="mt-4" Color="Color.Success" Variant="Variant.Filled" OnClick="@(() => OpenDialog("Create", _currentUncryptedEntrie))"> 
        Ajouter une entrée
    </MudButton>

    <MudAlert Severity="Severity.Error" Style="margin-top: 15px;" Dense="true" Elevation="0" @bind-Visible="_errorVisible">@_errorMessage</MudAlert>
</MudPaper>


<div>
    @if (isEdit)
    {
        <EntrieDialog EntrieUpdate="_currentUncryptedEntrie" CloseCallback="Close" UpdateCallback="UpdateCurrentEntrieToApi" CreateCallback="CreateNewEntrieToApi" IsCreateOrIsEdit=@typemodal></EntrieDialog>
    }
</div>
}

@code {
    [Parameter] public int CurrentVaultId {  get; set; }

    private List<EntrieDto> _entries = new(); //CurrentVault="CurrentVaultId"
    private List<EntrieUncryptedDto> _entriesUncrypted = new();
    private VaultDto _currentVault = new VaultDto();

    private bool _errorVisible = false;
    private string _errorMessage = "";

    private bool _showEntryForm = false;
    private bool _isNewEntry = true;
    private bool _formIsValid = false;
    private MudForm _form;
    private bool isEdit;
    private string typemodal;


    private EntrieDtoCreation _currentEntrieCreation = new();
    private EntrieDto _currentEntrie = new EntrieDto
    {
        NameData = new EncryptedDataDto(),
        UserNameData = new EncryptedDataDto(),
        UrlData = new EncryptedDataDto(),
        CommentData = new EncryptedDataDto()
    };
    private EntrieUncryptedDto _currentUncryptedEntrie = new EntrieUncryptedDto();

    private byte[] _globalIV;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                _entries = await GettingAll(CurrentVaultId);
                if (_entries.Count() > 0)
                {
                    _globalIV =_entries?.FirstOrDefault().NameData.Iv;
                }
                _currentVault = await CallServices.GetOneVaultAsync(CurrentVaultId);

                _entriesUncrypted.Clear();
                foreach (var entrie in _entries)
                {
                    var entryTemp = new EntrieUncryptedDto
                    {
                        IdEntrie = entrie.IdEntrie,
                        CreatedDate = entrie.CreatedDate,
                        UpdatedDate = entrie.UpdatedDate,
                        IsDesactivated = entrie.IsDesactivated,
                        NameData = CryptoHelper.Dechiffrer(entrie.NameData.CryptedData, _currentVault.PrivateKey, entrie.NameData.Iv),
                        UserNameData = CryptoHelper.Dechiffrer(entrie.UserNameData.CryptedData, _currentVault.PrivateKey, entrie.UserNameData.Iv),
                        UrlData = CryptoHelper.Dechiffrer(entrie.UrlData.CryptedData, _currentVault.PrivateKey, entrie.UrlData.Iv),
                        CommentData = CryptoHelper.Dechiffrer(entrie.CommentData.CryptedData, _currentVault.PrivateKey, entrie.CommentData.Iv)
                    };
                    _entriesUncrypted.Add(entryTemp);
                }
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task<List<EntrieDto>> GettingAll(int currentVaultId)
    {
        return await CallServices.GetEntriesAsync(currentVaultId);
    }

    private void OpenDialog(string typeButton, EntrieUncryptedDto entrie)
    {
        isEdit = true;
        typemodal = typeButton;
        _currentUncryptedEntrie = entrie; 
        StateHasChanged();
    } 

    private async void CreateNewEntrieToApi(EntrieUncryptedDto entrie)
    {
        try
        {                  
            // n'est utilie que la première fois ensuite tout les IV seront le mêmes 
            if (_globalIV== null)
            {
                _globalIV = CryptoHelper.AesHelper.GenerateRandomBytes(16);
            }

            //je convertis les string en EncryptedDataDtoCreation
            EntrieDtoCreation entrieDtoCreation = new EntrieDtoCreation
            {
                IsDesactivated = false,
                NameData = new EncryptedDataDtoCreation { CryptedData = CryptoHelper.Chiffrer(entrie.NameData, _currentVault.PrivateKey, _globalIV), Iv = _globalIV, Tag = CryptoHelper.AesHelper.GenerateRandomBytes(16) },
                UserNameData = new EncryptedDataDtoCreation { CryptedData = CryptoHelper.Chiffrer(entrie.UserNameData, _currentVault.PrivateKey, _globalIV), Iv = _globalIV, Tag = CryptoHelper.AesHelper.GenerateRandomBytes(16) },
                PasswordData = new EncryptedDataDtoCreation { CryptedData = CryptoHelper.Chiffrer(entrie.PasswordData, _currentVault.PrivateKey, _globalIV), Iv = _globalIV, Tag = CryptoHelper.AesHelper.GenerateRandomBytes(16) },
                UrlData = new EncryptedDataDtoCreation { CryptedData = CryptoHelper.Chiffrer(entrie.UrlData, _currentVault.PrivateKey, _globalIV), Iv = _globalIV, Tag = CryptoHelper.AesHelper.GenerateRandomBytes(16) },
                CommentData = new EncryptedDataDtoCreation { CryptedData = CryptoHelper.Chiffrer(entrie.CommentData, _currentVault.PrivateKey, _globalIV), Iv = _globalIV, Tag = CryptoHelper.AesHelper.GenerateRandomBytes(16) }
            };
            isEdit = true;

            var response = await CallServices.AddEntryAsync(CurrentVaultId, entrieDtoCreation);
            if (response.IsSuccessStatusCode)
            {
                _showEntryForm = false;
                _entries = await GettingAll(CurrentVaultId);
            }
            else
            {
                _errorVisible = true;
                _errorMessage = "Erreur lors de la création de l'entrée.";
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _errorVisible = true;
            _errorMessage = $"Erreur: {ex.Message}";
        }   
    }
    
    private void UpdateCurrentEntrieToApi(EntrieUncryptedDto entrie)
    {
        
        // todo convertir EntrieUncryptedDto en EntrieDtoCreation
        
        
        
        _isNewEntry = false;
       // _currentEntrieCreation = new EntrieDtoCreation
       // {
       //     NameData = new EncryptedDataDtoCreation { CryptedData = entrie.NameData?.CryptedData },
       //     UserNameData = new EncryptedDataDtoCreation { CryptedData = entrie.UserNameData?.CryptedData },
       //     UrlData = new EncryptedDataDtoCreation { CryptedData = entrie.UrlData?.CryptedData },
       //     CommentData = new EncryptedDataDtoCreation { CryptedData = entrie.CommentData?.CryptedData }
       // };
        _showEntryForm = true;
    }
    
    private void Close()
    {
        isEdit = false;
        StateHasChanged();
    }
    
    
    private async Task SaveEntry()
    {
        if (_isNewEntry)
        {
            try
            {
                var response = await CallServices.AddEntryAsync(CurrentVaultId, _currentEntrieCreation);
                if (response.IsSuccessStatusCode)
                {
                    _showEntryForm = false;
                    _entries = await GettingAll(CurrentVaultId);
                }
                else
                {
                    _errorVisible = true;
                    _errorMessage = "Erreur lors de la création de l'entrée.";
                }
            }
            catch (Exception ex)
            {
                _errorVisible = true;
                _errorMessage = $"Erreur: {ex.Message}";
            }
        }
        else
        {
            // Ici, vous pourriez ajouter la méthode pour modifier une entrée existante
            // Note: Cette fonctionnalité nécessiterait d'ajouter une méthode correspondante dans CallServices
            _errorVisible = true;
            _errorMessage = "La modification d'entrées n'est pas encore implémentée.";
        }
        
        _showEntryForm = false;
    }

   

}