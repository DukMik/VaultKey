@namespace TheBlazorVault.Components.Dialogs
@using MudBlazor
@using TheApiDto

<DialogContent>
    <MudText Typo="Typo.h6">
        Entrez le mot de passe du vault <b>VaultName</b>
    </MudText>

    <MudTextField @bind-Value="Password"
                  Label="Mot de passe"
                  InputType="InputType.Password"
                  Immediate="true"
                  Class="mt-4"
                  Required="true"/>

    @*  @if (Error)
    {
        <MudAlert Severity="Severity.Error" Class="mt-2 pa-2">
            Mot de passe incorrect
        </MudAlert>
    } *@
</DialogContent>

<DialogActions>
    <MudButton Color="Color.Primary" OnClick="ValidateAsync">Valider</MudButton>
    <MudButton OnClick="Cancel">Annuler</MudButton>
</DialogActions>

@* --- JS spécifique au dialog (facultatif) --- *@
<script>
window.vaultCrypto = window.vaultCrypto || {};
// Ajoute la fonction check seulement si elle n’existe pas déjà
if (!window.vaultCrypto.check) {
    const toHex = b => [...b].map(x => ('0'+x.toString(16)).slice(-2)).join('');
    const fromHex = h => new Uint8Array(h.match(/.{1,2}/g).map(b => parseInt(b,16)));

    window.vaultCrypto.check = async (password, saltHex, storedHash) => {
        if (!password) return false;
        const enc = new TextEncoder();
        const pw  = enc.encode(password);
        const salt= fromHex(saltHex);

        const all = new Uint8Array(salt.length + pw.length);
        all.set(salt); all.set(pw, salt.length);

        const hashBuf = await crypto.subtle.digest('SHA-256', all);
        return toHex(new Uint8Array(hashBuf)) === storedHash;
    };
}
</script>
